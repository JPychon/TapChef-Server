// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TapChef_Backend.Data;

#nullable disable

namespace TapChef_Backend.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230918113254_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("NoteService", b =>
                {
                    b.Property<int>("NotesId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("NotesId", "ServiceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("NoteService");
                });

            modelBuilder.Entity("NoteTransaction", b =>
                {
                    b.Property<int>("NotesId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.HasKey("NotesId", "TransactionId");

                    b.HasIndex("TransactionId");

                    b.ToTable("NoteTransaction");
                });

            modelBuilder.Entity("ServiceTag", b =>
                {
                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int>("TagsId")
                        .HasColumnType("int");

                    b.HasKey("ServiceId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("ServiceTag");
                });

            modelBuilder.Entity("TagTransaction", b =>
                {
                    b.Property<int>("TagsId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.HasKey("TagsId", "TransactionId");

                    b.HasIndex("TransactionId");

                    b.ToTable("TagTransaction");
                });

            modelBuilder.Entity("TapChef_Backend.DTOs.Communication.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("TapChef_Backend.DTOs.Components.Certificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VendorId");

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("TapChef_Backend.DTOs.Components.Degree", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VendorId");

                    b.ToTable("Degrees");
                });

            modelBuilder.Entity("TapChef_Backend.DTOs.Components.Dish", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("DisplayPictureId")
                        .HasColumnType("int");

                    b.Property<int?>("DisplayVideoId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("Rating")
                        .HasColumnType("double");

                    b.Property<int?>("VendorId")
                        .HasColumnType("int");

                    b.Property<int?>("VendorId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DisplayPictureId");

                    b.HasIndex("DisplayVideoId");

                    b.HasIndex("VendorId");

                    b.HasIndex("VendorId1");

                    b.ToTable("Dishes");
                });

            modelBuilder.Entity("TapChef_Backend.DTOs.Components.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int?>("DishId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Quantity")
                        .HasColumnType("longtext");

                    b.Property<int?>("RecipeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DishId");

                    b.HasIndex("RecipeId");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("TapChef_Backend.DTOs.Components.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int?>("DisplayPictureId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DisplayPictureId");

                    b.HasIndex("VendorId");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("TapChef_Backend.DTOs.Components.MenuItem", b =>
                {
                    b.Property<int>("MenuId")
                        .HasColumnType("int");

                    b.Property<int>("DishId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("MenuId", "DishId");

                    b.HasIndex("DishId");

                    b.ToTable("MenuItems");
                });

            modelBuilder.Entity("TapChef_Backend.DTOs.Components.Recipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("DisplayPictureId")
                        .HasColumnType("int");

                    b.Property<int?>("DisplayVideoId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DisplayPictureId");

                    b.HasIndex("DisplayVideoId");

                    b.HasIndex("VendorId");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("TapChef_Backend.DTOs.Identity.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDataConsent")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsOptInNewsletter")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsOptInPromotions")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsTwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("ProfilePictureId")
                        .HasColumnType("int");

                    b.Property<double>("Rating")
                        .HasColumnType("double");

                    b.Property<int?>("ReviewableEntityId")
                        .HasColumnType("int");

                    b.Property<int?>("ReviewerEntityId")
                        .HasColumnType("int");

                    b.Property<string>("TimeZone")
                        .HasColumnType("longtext");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("ProfilePictureId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("TapChef_Backend.DTOs.Identity.Vendor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Education")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal?>("FeePerEvent")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("FeePerHour")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsChargedPerEvent")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsChargedPerHour")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDataConsent")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsOptInNewsletter")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsOptInPromotions")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsTwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("ProfilePictureId")
                        .HasColumnType("int");

                    b.Property<double>("Rating")
                        .HasColumnType("double");

                    b.Property<int?>("ReviewableEntityId")
                        .HasColumnType("int");

                    b.Property<int?>("ReviewerEntityId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TimeZone")
                        .HasColumnType("longtext");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("ProfilePictureId");

                    b.ToTable("Vendors");
                });

            modelBuilder.Entity("TapChef_Backend.DTOs.Media.ImageMetadata", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AltText")
                        .HasColumnType("longtext");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("ContentType")
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("FileName")
                        .HasColumnType("longtext");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastUpdatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PublicId")
                        .HasColumnType("longtext");

                    b.Property<long?>("Size")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.Property<string>("Url")
                        .HasColumnType("longtext");

                    b.Property<int?>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("VendorId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("TapChef_Backend.DTOs.Media.VideoMetadata", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AltText")
                        .HasColumnType("longtext");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("ContentType")
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("FileName")
                        .HasColumnType("longtext");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastUpdatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PublicId")
                        .HasColumnType("longtext");

                    b.Property<long?>("Size")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.Property<string>("Url")
                        .HasColumnType("longtext");

                    b.Property<int?>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("VendorId");

                    b.ToTable("Videos");
                });

            modelBuilder.Entity("TapChef_Backend.DTOs.Orders.Error", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ErrorType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Message")
                        .HasColumnType("longtext");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("StackTrace")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Errors");
                });

            modelBuilder.Entity("TapChef_Backend.DTOs.Orders.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("ErrorId")
                        .HasColumnType("int");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Token")
                        .HasColumnType("longtext");

                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ErrorId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("TapChef_Backend.DTOs.Orders.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("DisplayImageId")
                        .HasColumnType("int");

                    b.Property<int?>("DisplayVideoId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MaxHours")
                        .HasColumnType("int");

                    b.Property<decimal>("MaxPrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("MinHours")
                        .HasColumnType("int");

                    b.Property<decimal>("MinPrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("PostedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("StartDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("ClientId");

                    b.HasIndex("DisplayImageId");

                    b.HasIndex("DisplayVideoId");

                    b.HasIndex("VendorId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("TapChef_Backend.DTOs.Orders.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ErrorId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ErrorId");

                    b.HasIndex("PaymentId")
                        .IsUnique();

                    b.HasIndex("ServiceId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("TapChef_Backend.DTOs.Reviews.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("DisplayPictureId")
                        .HasColumnType("int");

                    b.Property<int?>("DisplayVideoId")
                        .HasColumnType("int");

                    b.Property<int>("OriginEntityId")
                        .HasColumnType("int");

                    b.Property<double>("Rating")
                        .HasColumnType("double");

                    b.Property<int>("TargetEntityId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("DisplayPictureId");

                    b.HasIndex("DisplayVideoId");

                    b.HasIndex("OriginEntityId");

                    b.HasIndex("TargetEntityId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("TapChef_Backend.DTOs.Reviews.ReviewableEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.HasIndex("VendorId")
                        .IsUnique();

                    b.ToTable("ReviewableEntities");
                });

            modelBuilder.Entity("TapChef_Backend.DTOs.Reviews.ReviewerEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.HasIndex("VendorId")
                        .IsUnique();

                    b.ToTable("ReviewerEntities");
                });

            modelBuilder.Entity("TapChef_Backend.DTOs.Utility.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("TapChef_Backend.DTOs.Utility.Instruction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("DishId")
                        .HasColumnType("int");

                    b.Property<int?>("RecipeId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("DishId");

                    b.HasIndex("RecipeId");

                    b.ToTable("Instructions");
                });

            modelBuilder.Entity("TapChef_Backend.DTOs.Utility.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("DishId")
                        .HasColumnType("int");

                    b.Property<int?>("IngredientId")
                        .HasColumnType("int");

                    b.Property<int?>("MenuId")
                        .HasColumnType("int");

                    b.Property<int?>("RecipeId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("DishId");

                    b.HasIndex("IngredientId");

                    b.HasIndex("MenuId");

                    b.HasIndex("RecipeId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("TapChef_Backend.DTOs.Utility.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("DishId")
                        .HasColumnType("int");

                    b.Property<int?>("MenuId")
                        .HasColumnType("int");

                    b.Property<int?>("RecipeId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("DishId");

                    b.HasIndex("MenuId");

                    b.HasIndex("RecipeId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("NoteService", b =>
                {
                    b.HasOne("TapChef_Backend.DTOs.Utility.Note", null)
                        .WithMany()
                        .HasForeignKey("NotesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TapChef_Backend.DTOs.Orders.Service", null)
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NoteTransaction", b =>
                {
                    b.HasOne("TapChef_Backend.DTOs.Utility.Note", null)
                        .WithMany()
                        .HasForeignKey("NotesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TapChef_Backend.DTOs.Orders.Transaction", null)
                        .WithMany()
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ServiceTag", b =>
                {
                    b.HasOne("TapChef_Backend.DTOs.Orders.Service", null)
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TapChef_Backend.DTOs.Utility.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TagTransaction", b =>
                {
                    b.HasOne("TapChef_Backend.DTOs.Utility.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TapChef_Backend.DTOs.Orders.Transaction", null)
                        .WithMany()
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TapChef_Backend.DTOs.Components.Certificate", b =>
                {
                    b.HasOne("TapChef_Backend.DTOs.Identity.Vendor", null)
                        .WithMany("Certificates")
                        .HasForeignKey("VendorId");
                });

            modelBuilder.Entity("TapChef_Backend.DTOs.Components.Degree", b =>
                {
                    b.HasOne("TapChef_Backend.DTOs.Identity.Vendor", null)
                        .WithMany("Degrees")
                        .HasForeignKey("VendorId");
                });

            modelBuilder.Entity("TapChef_Backend.DTOs.Components.Dish", b =>
                {
                    b.HasOne("TapChef_Backend.DTOs.Media.ImageMetadata", "DisplayPicture")
                        .WithMany()
                        .HasForeignKey("DisplayPictureId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TapChef_Backend.DTOs.Media.VideoMetadata", "DisplayVideo")
                        .WithMany()
                        .HasForeignKey("DisplayVideoId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TapChef_Backend.DTOs.Identity.Vendor", null)
                        .WithMany("Dishes")
                        .HasForeignKey("VendorId");

                    b.HasOne("TapChef_Backend.DTOs.Identity.Vendor", null)
                        .WithMany("PreferredDishes")
                        .HasForeignKey("VendorId1");

                    b.Navigation("DisplayPicture");

                    b.Navigation("DisplayVideo");
                });

            modelBuilder.Entity("TapChef_Backend.DTOs.Components.Ingredient", b =>
                {
                    b.HasOne("TapChef_Backend.DTOs.Components.Dish", null)
                        .WithMany("Ingredients")
                        .HasForeignKey("DishId");

                    b.HasOne("TapChef_Backend.DTOs.Components.Recipe", null)
                        .WithMany("Ingredients")
                        .HasForeignKey("RecipeId");
                });

            modelBuilder.Entity("TapChef_Backend.DTOs.Components.Menu", b =>
                {
                    b.HasOne("TapChef_Backend.DTOs.Media.ImageMetadata", "DisplayPicture")
                        .WithMany()
                        .HasForeignKey("DisplayPictureId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TapChef_Backend.DTOs.Identity.Vendor", null)
                        .WithMany("Menus")
                        .HasForeignKey("VendorId");

                    b.Navigation("DisplayPicture");
                });

            modelBuilder.Entity("TapChef_Backend.DTOs.Components.MenuItem", b =>
                {
                    b.HasOne("TapChef_Backend.DTOs.Components.Dish", "Dish")
                        .WithMany()
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TapChef_Backend.DTOs.Components.Menu", "Menu")
                        .WithMany("MenuDishes")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("TapChef_Backend.DTOs.Components.Recipe", b =>
                {
                    b.HasOne("TapChef_Backend.DTOs.Media.ImageMetadata", "DisplayPicture")
                        .WithMany()
                        .HasForeignKey("DisplayPictureId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TapChef_Backend.DTOs.Media.VideoMetadata", "DisplayVideo")
                        .WithMany()
                        .HasForeignKey("DisplayVideoId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TapChef_Backend.DTOs.Identity.Vendor", null)
                        .WithMany("Recipes")
                        .HasForeignKey("VendorId");

                    b.Navigation("DisplayPicture");

                    b.Navigation("DisplayVideo");
                });

            modelBuilder.Entity("TapChef_Backend.DTOs.Identity.Client", b =>
                {
                    b.HasOne("TapChef_Backend.DTOs.Utility.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TapChef_Backend.DTOs.Media.ImageMetadata", "ProfilePicture")
                        .WithMany()
                        .HasForeignKey("ProfilePictureId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Address");

                    b.Navigation("ProfilePicture");
                });

            modelBuilder.Entity("TapChef_Backend.DTOs.Identity.Vendor", b =>
                {
                    b.HasOne("TapChef_Backend.DTOs.Utility.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TapChef_Backend.DTOs.Media.ImageMetadata", "ProfilePicture")
                        .WithMany()
                        .HasForeignKey("ProfilePictureId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Address");

                    b.Navigation("ProfilePicture");
                });

            modelBuilder.Entity("TapChef_Backend.DTOs.Media.ImageMetadata", b =>
                {
                    b.HasOne("TapChef_Backend.DTOs.Identity.Client", null)
                        .WithMany("UploadedImages")
                        .HasForeignKey("ClientId");

                    b.HasOne("TapChef_Backend.DTOs.Identity.Vendor", null)
                        .WithMany("UploadedImages")
                        .HasForeignKey("VendorId");
                });

            modelBuilder.Entity("TapChef_Backend.DTOs.Media.VideoMetadata", b =>
                {
                    b.HasOne("TapChef_Backend.DTOs.Identity.Client", null)
                        .WithMany("UploadedVideos")
                        .HasForeignKey("ClientId");

                    b.HasOne("TapChef_Backend.DTOs.Identity.Vendor", null)
                        .WithMany("UploadedVideos")
                        .HasForeignKey("VendorId");
                });

            modelBuilder.Entity("TapChef_Backend.DTOs.Orders.Payment", b =>
                {
                    b.HasOne("TapChef_Backend.DTOs.Orders.Error", "Error")
                        .WithMany()
                        .HasForeignKey("ErrorId");

                    b.Navigation("Error");
                });

            modelBuilder.Entity("TapChef_Backend.DTOs.Orders.Service", b =>
                {
                    b.HasOne("TapChef_Backend.DTOs.Utility.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TapChef_Backend.DTOs.Identity.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("TapChef_Backend.DTOs.Media.ImageMetadata", "DisplayImage")
                        .WithMany()
                        .HasForeignKey("DisplayImageId");

                    b.HasOne("TapChef_Backend.DTOs.Media.VideoMetadata", "DisplayVideo")
                        .WithMany()
                        .HasForeignKey("DisplayVideoId");

                    b.HasOne("TapChef_Backend.DTOs.Identity.Vendor", "Vendor")
                        .WithMany()
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Client");

                    b.Navigation("DisplayImage");

                    b.Navigation("DisplayVideo");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("TapChef_Backend.DTOs.Orders.Transaction", b =>
                {
                    b.HasOne("TapChef_Backend.DTOs.Orders.Error", "Error")
                        .WithMany()
                        .HasForeignKey("ErrorId");

                    b.HasOne("TapChef_Backend.DTOs.Orders.Payment", "Payment")
                        .WithOne("Transaction")
                        .HasForeignKey("TapChef_Backend.DTOs.Orders.Transaction", "PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TapChef_Backend.DTOs.Orders.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId");

                    b.Navigation("Error");

                    b.Navigation("Payment");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("TapChef_Backend.DTOs.Reviews.Review", b =>
                {
                    b.HasOne("TapChef_Backend.DTOs.Media.ImageMetadata", "DisplayPicture")
                        .WithMany()
                        .HasForeignKey("DisplayPictureId");

                    b.HasOne("TapChef_Backend.DTOs.Media.VideoMetadata", "DisplayVideo")
                        .WithMany()
                        .HasForeignKey("DisplayVideoId");

                    b.HasOne("TapChef_Backend.DTOs.Reviews.ReviewerEntity", "OriginEntity")
                        .WithMany("OriginatedReviews")
                        .HasForeignKey("OriginEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TapChef_Backend.DTOs.Reviews.ReviewableEntity", "TargetEntity")
                        .WithMany("TargetedReviews")
                        .HasForeignKey("TargetEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DisplayPicture");

                    b.Navigation("DisplayVideo");

                    b.Navigation("OriginEntity");

                    b.Navigation("TargetEntity");
                });

            modelBuilder.Entity("TapChef_Backend.DTOs.Reviews.ReviewableEntity", b =>
                {
                    b.HasOne("TapChef_Backend.DTOs.Identity.Client", "Client")
                        .WithOne("ReviewableEntity")
                        .HasForeignKey("TapChef_Backend.DTOs.Reviews.ReviewableEntity", "ClientId");

                    b.HasOne("TapChef_Backend.DTOs.Identity.Vendor", "Vendor")
                        .WithOne("ReviewableEntity")
                        .HasForeignKey("TapChef_Backend.DTOs.Reviews.ReviewableEntity", "VendorId");

                    b.Navigation("Client");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("TapChef_Backend.DTOs.Reviews.ReviewerEntity", b =>
                {
                    b.HasOne("TapChef_Backend.DTOs.Identity.Client", "Client")
                        .WithOne("ReviewerEntity")
                        .HasForeignKey("TapChef_Backend.DTOs.Reviews.ReviewerEntity", "ClientId");

                    b.HasOne("TapChef_Backend.DTOs.Identity.Vendor", "Vendor")
                        .WithOne("ReviewerEntity")
                        .HasForeignKey("TapChef_Backend.DTOs.Reviews.ReviewerEntity", "VendorId");

                    b.Navigation("Client");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("TapChef_Backend.DTOs.Utility.Instruction", b =>
                {
                    b.HasOne("TapChef_Backend.DTOs.Components.Dish", null)
                        .WithMany("Instructions")
                        .HasForeignKey("DishId");

                    b.HasOne("TapChef_Backend.DTOs.Components.Recipe", null)
                        .WithMany("Instructions")
                        .HasForeignKey("RecipeId");
                });

            modelBuilder.Entity("TapChef_Backend.DTOs.Utility.Note", b =>
                {
                    b.HasOne("TapChef_Backend.DTOs.Components.Dish", null)
                        .WithMany("Notes")
                        .HasForeignKey("DishId");

                    b.HasOne("TapChef_Backend.DTOs.Components.Ingredient", null)
                        .WithMany("Notes")
                        .HasForeignKey("IngredientId");

                    b.HasOne("TapChef_Backend.DTOs.Components.Menu", null)
                        .WithMany("Notes")
                        .HasForeignKey("MenuId");

                    b.HasOne("TapChef_Backend.DTOs.Components.Recipe", null)
                        .WithMany("Notes")
                        .HasForeignKey("RecipeId");
                });

            modelBuilder.Entity("TapChef_Backend.DTOs.Utility.Tag", b =>
                {
                    b.HasOne("TapChef_Backend.DTOs.Components.Dish", null)
                        .WithMany("Tags")
                        .HasForeignKey("DishId");

                    b.HasOne("TapChef_Backend.DTOs.Components.Menu", null)
                        .WithMany("Tags")
                        .HasForeignKey("MenuId");

                    b.HasOne("TapChef_Backend.DTOs.Components.Recipe", null)
                        .WithMany("Tags")
                        .HasForeignKey("RecipeId");
                });

            modelBuilder.Entity("TapChef_Backend.DTOs.Components.Dish", b =>
                {
                    b.Navigation("Ingredients");

                    b.Navigation("Instructions");

                    b.Navigation("Notes");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("TapChef_Backend.DTOs.Components.Ingredient", b =>
                {
                    b.Navigation("Notes");
                });

            modelBuilder.Entity("TapChef_Backend.DTOs.Components.Menu", b =>
                {
                    b.Navigation("MenuDishes");

                    b.Navigation("Notes");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("TapChef_Backend.DTOs.Components.Recipe", b =>
                {
                    b.Navigation("Ingredients");

                    b.Navigation("Instructions");

                    b.Navigation("Notes");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("TapChef_Backend.DTOs.Identity.Client", b =>
                {
                    b.Navigation("ReviewableEntity");

                    b.Navigation("ReviewerEntity");

                    b.Navigation("UploadedImages");

                    b.Navigation("UploadedVideos");
                });

            modelBuilder.Entity("TapChef_Backend.DTOs.Identity.Vendor", b =>
                {
                    b.Navigation("Certificates");

                    b.Navigation("Degrees");

                    b.Navigation("Dishes");

                    b.Navigation("Menus");

                    b.Navigation("PreferredDishes");

                    b.Navigation("Recipes");

                    b.Navigation("ReviewableEntity");

                    b.Navigation("ReviewerEntity");

                    b.Navigation("UploadedImages");

                    b.Navigation("UploadedVideos");
                });

            modelBuilder.Entity("TapChef_Backend.DTOs.Orders.Payment", b =>
                {
                    b.Navigation("Transaction")
                        .IsRequired();
                });

            modelBuilder.Entity("TapChef_Backend.DTOs.Reviews.ReviewableEntity", b =>
                {
                    b.Navigation("TargetedReviews");
                });

            modelBuilder.Entity("TapChef_Backend.DTOs.Reviews.ReviewerEntity", b =>
                {
                    b.Navigation("OriginatedReviews");
                });
#pragma warning restore 612, 618
        }
    }
}
